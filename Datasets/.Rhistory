table(smoke_cancer_dataset)
smoke_cancer_dataset = (matrix(c(281, 210, 228, 279),nrow = 2,ncol = 2))
colnames(smoke_cancer_dataset) = c("CancerYES", "CancerNO")
rownames(smoke_cancer_dataset) = c("SmokeYES", "SmokeNO")
smoke_cancer_dataset
as.data.frame(smoke_cancer_dataset)
as.data.frame(as.table(smoke_cancer_dataset))
smoke_cancer_dataframe = as.data.frame(as.table(smoke_cancer_dataset))
smoke_cancer_dataframe
fit <- glm(Var2 ~ Var1, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
fit <- glm(Var2 ~ Var1, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
smoke_cancer_dataset = (matrix(c(281, 210, 228, 279),nrow = 2,ncol = 2))
colnames(smoke_cancer_dataset) = c("YES", "NO")
rownames(smoke_cancer_dataset) = c("YES", "NO")
smoke_cancer_dataframe = as.data.frame(as.table(smoke_cancer_dataset))
colnames(smoke_cancer_dataframe) = c("Smoke", "Cancer")
# fitting the logistic regression model
fit <- glm(Var2 ~ Var1, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
smoke_cancer_dataset = (matrix(c(281, 210, 228, 279),nrow = 2,ncol = 2))
colnames(smoke_cancer_dataset) = c("YES", "NO")
rownames(smoke_cancer_dataset) = c("YES", "NO")
smoke_cancer_dataframe = as.data.frame(as.table(smoke_cancer_dataset))
colnames(smoke_cancer_dataframe) = c("Smoke", "Cancer")
# fitting the logistic regression model
fit <- glm(Cancer ~ Smoke, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
smoke_cancer_dataset = (matrix(c(281, 210, 228, 279),nrow = 2,ncol = 2))
colnames(smoke_cancer_dataset) = c("YES", "NO")
rownames(smoke_cancer_dataset) = c("YES", "NO")
smoke_cancer_dataframe = as.data.frame(as.table(smoke_cancer_dataset))
colnames(smoke_cancer_dataframe)[1:2] = c("Smoke", "Cancer")
# fitting the logistic regression model
fit <- glm(Cancer ~ Smoke, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
exp(-0.21)
exp(-0.21+0.49)
# Creating the dataset
smoke_cancer_dataset = (matrix(c(281, 210, 228, 279),nrow = 2,ncol = 2))
colnames(smoke_cancer_dataset) = c("YES", "NO")
rownames(smoke_cancer_dataset) = c("YES", "NO")
smoke_cancer_dataframe = as.data.frame(as.table(smoke_cancer_dataset))
colnames(smoke_cancer_dataframe)[1:2] = c("Smoke", "Cancer")
# fitting the logistic regression model
fit <- glm(Cancer ~ Smoke, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
pi0 <- exp(fit$coefficient[1]) / (1 + exp(fit$coefficient[1]))
pi1 <- exp(fit$coefficient[1] + fit$coefficient[2]) / (1 + exp(fit$coefficient[1]+fit$coefficient[2]))
pi0
pi1
beta0 = fit$coefficient[1]
beta1 = fit$coefficient[2]
pi0 <- exp(beta0) / (1 + exp(beta0))
pi1 <- exp(beta0 + beta1) / (1 + exp(beta0+beta1))
pi0
pi1
beta0
odds0 <- pi0 / (1 - pi0)
odds1 <- pi1 / (1 - pi1)
OR <- odds1 / odds0
OR
#the same result with:
OR <- exp(beta1)
OR
smoke_cancer_dataframe
smoke_cancer_dataframe$Smoke
pi1
OR
OR <- odds1 / odds0
OR
beta0
beta1
smoke_cancer_dataset
fit
smoke_cancer_dataset = (matrix(c(281, 210, 228, 279),nrow = 2,ncol = 2))
colnames(smoke_cancer_dataset) = c(1, 0)
rownames(smoke_cancer_dataset) = c(1, 0)
smoke_cancer_dataframe = as.data.frame(as.table(smoke_cancer_dataset))
colnames(smoke_cancer_dataframe)[1:2] = c("Smoke", "Cancer")
# Fitting the logistic regression model
fit <- glm(Cancer ~ Smoke, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
smoke_cancer_dataframe
smoke_cancer_dataset = (matrix(c(281, 228, 210, 279),nrow = 2,ncol = 2))
colnames(smoke_cancer_dataset) = c(1, 0)
rownames(smoke_cancer_dataset) = c(1, 0)
smoke_cancer_dataframe = as.data.frame(as.table(smoke_cancer_dataset))
colnames(smoke_cancer_dataframe)[1:2] = c("Smoke", "Cancer")
smoke_cancer_dataframe
fit <- glm(Cancer ~ Smoke, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
beta0 = fit$coefficient[1]
beta1 = fit$coefficient[2]
pi0 <- exp(beta0) / (1 + exp(beta0))
pi1 <- exp(beta0 + beta1) / (1 + exp(beta0+beta1))
odds0 <- pi0 / (1 - pi0)
odds1 <- pi1 / (1 - pi1)
OR <- odds1 / odds0
#the same result with:
OR <- exp(beta1)
OR
odds1
odds0
smoke_cancer_dataframe
smoke_cancer_dataset
smoke_cancer_dataframe$Cancer
as.numeric(smoke_cancer_dataframe$Cancer)
levels(smoke_cancer_dataframe$Cancer) = c(0,1)
as.numeric(smoke_cancer_dataframe$Cancer)
smoke_cancer_dataframe$Cancer
fit <- glm(Cancer ~ Smoke, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
levels(smoke_cancer_dataframe$Cancer) = c(0,1)
levels(smoke_cancer_dataframe$Smoke) = c(0,1)
# Fitting the logistic regression model
fit <- glm(Cancer ~ Smoke, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
smoke_cancer_dataset
smoke_cancer_dataframe$Smoke
smoke_cancer_dataframe
smoke_cancer_dataset = (matrix(c(281, 228, 210, 279),nrow = 2,ncol = 2))
colnames(smoke_cancer_dataset) = c(1, 0)
rownames(smoke_cancer_dataset) = c(1, 0)
smoke_cancer_dataframe = as.data.frame(as.table(smoke_cancer_dataset))
colnames(smoke_cancer_dataframe)[1:2] = c("Smoke", "Cancer")
# Fitting the logistic regression model
fit <- glm(Cancer ~ Smoke, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
smoke_cancer_dataframe
smoke_cancer_dataframe$Cancer
as.numeric(smoke_cancer_dataframe$Cancer)
smoke_cancer_dataframe$Cancer = ifelse(as.numeric(smoke_cancer_dataframe$Cancer)==1,1,0)
# Fitting the logistic regression model
fit <- glm(Cancer ~ Smoke, weights = Freq, data = smoke_cancer_dataframe, family = binomial(logit))
summary(fit)
smoke_cancer_dataframe
smoke_cancer_dataframe$Cancer
beta0 = fit$coefficient[1]
beta1 = fit$coefficient[2]
pi0 <- exp(beta0) / (1 + exp(beta0))
pi1 <- exp(beta0 + beta1) / (1 + exp(beta0+beta1))
odds0 <- pi0 / (1 - pi0)
odds1 <- pi1 / (1 - pi1)
OR <- odds1 / odds0
#the same result with:
OR <- exp(beta1)
OR
pi0
pi1
beta0
exp(0.29)
OR
galton_data = read.table("CoSIBs_Reg/Datasets/Galton.txt", header = T)
galton_data
galton_data = read.table("CoSIBs_Reg/Datasets/Galton.txt", header = T)
# OLS
model.1 <- lm(Progeny ~ Parent, data = galton_data)
summary(model.1)
# WLS
model.2 <- lm(Progeny ~ Parent, weights=1/SD^2, data = galton_data)
summary(model.2)
plot(x=Parent, y=Progeny, ylim=c(0.158,0.174),
panel.last = c(lines(sort(Parent), fitted(model.1)[order(Parent)], col="blue"),
lines(sort(Parent), fitted(model.2)[order(Parent)], col="red")))
legend("topleft", col=c("blue","red"), lty=1,
inset=0.02, legend=c("OLS", "WLS"))
plot(x=Parent, y=Progeny, ylim=c(0.158,0.174),
panel.last = c(lines(sort(Parent), fitted(model.1)[order(Parent)], col="blue"),
lines(sort(Parent), fitted(model.2)[order(Parent)], col="red")),data = galton_data)
legend("topleft", col=c("blue","red"), lty=1,
inset=0.02, legend=c("OLS", "WLS"))
attach(galton_data)
plot(x=Parent, y=Progeny, ylim=c(0.158,0.174),
panel.last = c(lines(sort(Parent), fitted(model.1)[order(Parent)], col="blue"),
lines(sort(Parent), fitted(model.2)[order(Parent)], col="red")))
legend("topleft", col=c("blue","red"), lty=1,
inset=0.02, legend=c("OLS", "WLS"))
# OLS
model.1 <- lm(Progeny ~ Parent, data = galton_data)
summary(model.1)
# WLS
model.2 <- lm(Progeny ~ Parent, weights=1/SD^2, data = galton_data)
summary(model.2)
file_path <- "http://www.sthda.com/sthda/RDoc/data/housetasks.txt"
housetasks <- read.delim(file_path, row.names = 1)
head(housetasks)
library("gplots")
# 1. convert the data as a table
dt <- as.table(as.matrix(housetasks))
# 2. Graph
balloonplot(t(dt), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
require(gplots)
# 1. convert the data as a table
dt <- as.table(as.matrix(housetasks))
# 2. Graph
balloonplot(t(dt), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
chisq <- chisq.test(housetasks)
chisq
setwd("/Users/seals/Desktop/CSPH/CoSIBS/CoSIBs_Reg/Datasets")
## First Logistic regression Example
leukemia <- read.table("leukemia_remission.txt", header=T)
model.1 <- glm(REMISS ~ CELL + SMEAR + INFIL + LI + BLAST + TEMP, family="binomial")
summary(model.1)
setwd("/Users/seals/Desktop/CSPH/CoSIBS/CoSIBs_Reg/Datasets")
## First Logistic regression Example
leukemia <- read.table("leukemia_remission.txt", header=T)
model.1 <- glm(REMISS ~ CELL + SMEAR + INFIL + LI + BLAST + TEMP, family="binomial", data = leukemia)
summary(model.1)
## First Logistic regression Example
leukemia <- read.table("leukemia_remission.txt", header=T)
## First Logistic regression Example
leukemia <- read.table("leukemia_remission.txt")
## First Logistic regression Example
leukemia <- read.delim("leukemia_remission.txt", fileEncoding="UCS-2LE")
leukemia
## First Logistic regression Example
leukemia <- read.delim("leukemia_remission.txt")
leukemia <- read.delim("leukemia_remission.txt", fileEncoding="UCS-2LE")
model.1 <- glm(REMISS ~ CELL + SMEAR + INFIL + LI + BLAST + TEMP, family="binomial", data = leukemia)
summary(model.1)
leukemia <- read.delim("leukemia_remission.txt", fileEncoding="UCS-2LE")
head(leukemia)
model.1 <- glm(REMISS ~ LI, family="binomial", data = leukemia)
summary(model.1)
exp(2.897)
confint.default(model.1) # based on asymptotic normality
# Interval Estimate of log odds
confint.default(model.1) # based on asymptotic normality
# Interval Estimate of odds
exp(confint.default(model.1))
model.2 <- glm(REMISS ~ CELL + SMEAR + INFIL + LI + BLAST + TEMP, family="binomial", data = leukemia)
summary(model.2)
# Adding more predictors
model.2 <- glm(REMISS ~ CELL + SMEAR + INFIL + LI + BLAST + TEMP, family="binomial", data = leukemia)
summary(model.2)
confint.default(model.2)
plot(x=LI, y=REMISS,
panel.last = lines(sort(LI), fitted(model.2)[order(LI)]))
plot(x=leukemia$LI, y=leukemia$REMISS,
panel.last = lines(sort(LI), fitted(model.2)[order(LI)]))
plot(x=leukemia$LI, y=leukemia$REMISS,
panel.last = lines(sort(LI), fitted(model.2)[order(leukemia$LI)]))
plot(x=leukemia$LI, y=leukemia$REMISS,
panel.last = lines(sort(leukemia$LI), fitted(model.2)[order(leukemia$LI)]))
anova(model.1)
anova(model.1, model.2)
lrtest(model.2 , model.1)
install.packages("lmtest")
require(lmtest)
lrtest(model.2 , model.1)
require(ResourceSelection)
hoslem.test(model.2$y, fitted(model.2), g=9) # Hoslem Test
1-model.2$deviance/model.2$null.deviance # "R-squared" = 0.2414424
summary(influence.measures(model.2))
install.packages("ResourceSelection")
1-model.2$deviance/model.2$null.deviance # "R-squared" = 0.2414424
summary(influence.measures(model.2))
require(AER)
data("NMES1988")
head(NMES1998)
head(NMES1988)
hist(NMES1988$visits)
hist(NMES1988$nvisits)
hist(NMES1988$visits,bin = 2)
hist(NMES1988$visits,bin = 1)
hist(NMES1988$visits,bin = 0.1)
hist(NMES1988$visits,bin = 100)
require(AER)
data("NMES1988")
Poisson_rg <- glm(visits = emergency + hospital + health + chronic +
adl +region + age + afam +gender +school, family="poisson", data=NMES1988)
NMES1988$emergency
require(AER)
data("NMES1988")
Poisson_rg <- glm(visits = emergency + hospital + health + chronic +
adl +region + age + afam +gender +school, family="poisson", data=NMES1988)
NMES1988$visits
Poisson_rg <- glm(visits = emergency + hospital + health + chronic +
adl + region + age + afam + gender + school, family="poisson", data=NMES1988)
glm(visits = hospital, family="poisson", data=NMES1988)
glm(visits ~hospital, family="poisson", data=NMES1988)
Poisson_rg <- glm(visits ~ emergency + hospital + health + chronic +
adl + region + age + afam + gender + school, family="poisson", data=NMES1988)
summary(Poisson_rg)
exp(0.14)
install.packages("msm")
require(msm)
cov.m1 <- vcovHC(Poisson_rg, type="HC0")
cov.ml
cov.m1
s <- deltamethod(list(~ exp(x1), ~ exp(x2), ~ exp(x3), ~ exp(x4)),
coef(m1), cov.m1)
s <- deltamethod(list(~ exp(x1), ~ exp(x2), ~ exp(x3), ~ exp(x4)),
coef(Poisson_rg), cov.m1)
s
require(AER)
data("NMES1988")
Poisson_rg <- glm(visits ~ emergency + hospital + health + chronic +
adl + region + age + afam + gender + school, family="poisson", data=NMES1988)
summary(Poisson_rg)
require(msm)
cov.m1 <- vcovHC(Poisson_rg, type="HC0") # sandwitch variance estimator
std.err <- sqrt(diag(cov.m1))
r.est <- cbind(Estimate= coef(Poisson_rg), "Robust SE" = std.err,
"Pr(>|z|)" = 2 * pnorm(abs(coef(Poisson_rg)/std.err), lower.tail=FALSE),
LL = coef(Poisson_rg) - 1.96 * std.err,
UL = coef(Poisson_rg) + 1.96 * std.err)
r.est
s <- deltamethod(list(~ exp(x1), ~ exp(x2), ~ exp(x3), ~ exp(x4)),
coef(Poisson_rg), cov.m1)
rexp.est <- exp(r.est[, -3])
## replace SEs with estimates for exponentiated coefficients
rexp.est[, "Robust SE"] <- s
rexp.est
s
coef(Poisson_rg)
s <- deltamethod(list(~ exp(x1), ~ exp(x2), ~ exp(x3), ~ exp(x4), ~ exp(x5)),
coef(Poisson_rg), cov.m1)
rexp.est <- exp(r.est[, -3])
## replace SEs with estimates for exponentiated coefficients
rexp.est[, "Robust SE"] <- s
rexp.est[, "Robust SE"]
r.est
s <- deltamethod(list(~ exp(x1), ~ exp(x2), ~ exp(x3), ~ exp(x4), ~ exp(x5)),
coef(Poisson_rg), cov.m1)
rexp.est <- exp(r.est[1:5, -3])
## replace SEs with estimates for exponentiated coefficients
rexp.est[, "Robust SE"] <- s
rexp.est
s <- deltamethod(list(~ exp(x1), ~ exp(x2), ~ exp(x3), ~ exp(x4), ~ exp(x5), ~ exp(x6)),
coef(Poisson_rg), cov.m1)
rexp.est <- exp(r.est[1:6, -3])
## replace SEs with estimates for exponentiated coefficients
rexp.est[, "Robust SE"] <- s
rexp.est
Poisson_rg <- glm(visits ~ age + gender, family="poisson", data=NMES1988)
summary(Poisson_rg)
cov.m1 <- vcovHC(Poisson_rg, type="HC0")
cov.ml
cov.m1
knitr::opts_chunk$set(echo = FALSE)
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(LaplacesDemon))
suppressMessages(library(ggplot2))
suppressMessages(library(ComplexHeatmap))
suppressMessages(library(igraph))
suppressMessages(library(PerformanceAnalytics))
require(survival)
require(survminer)
suppressMessages(source("/Users/seals/Desktop/CSPH/Jun9/alex_funcs.R"))
suppressMessages(source("/Users/seals/Desktop/CSPH/May4/density_finder.R"))
my_working_dir = '/Users/seals/Desktop/Debashish_data'
python_path = "/usr/bin/python"
cell_data = read.csv(paste0(my_working_dir,"/TNBC_shareCellData/cellData.csv"))
p_status = read.csv(paste0(my_working_dir,"/TNBC_shareCellData/patient_class.csv"),header = F)
clinical_data = readxl::read_excel(paste0(my_working_dir,"/TNBC_shareCellData/tnbc_clinical.xlsx"),col_names = T,skip = 1)
groups = c("Unidentified", "Immune", "Endothelial", "Mesenchymal-like", "Tumor", "Keratin-positive tumor")
cell_data$Group = as.factor(cell_data$Group)
levels(cell_data$Group) <- groups
marker_names = names(cell_data)[4:52]
cell_data = na.omit(cell_data)
dim(cell_data)
hist(cell_data$dsDNA)
hist(log(cell_data$dsDNA))
hist(log(cell_data$CD45RO))
hist((cell_data$CD45RO))
hist((cell_data$CD45RO))
range01
marker_names
selected_data = cell_data[,4:52]
selected_data
selected_data = cell_data[,4:52]
range_std_data =  selected_data
range_std_data = apply(selected_data,2,range01)
hist(range_std_data)
selected_data = as.data.frame(cell_data[,4:52])
range_std_data =  selected_data
range_std_data = apply(selected_data,2,range01)
hist(range_std_data[,1])
hist(range_std_data[,1])
dim(range_std_data)
str(range_std_data)
cell_data[,1]
cell_data[,2]
cell_data[,4]
range_std_data[,5]
range_std_data
range_std_data
range_std_data$MPO
range_std_data = as.data.frame(apply(selected_data,2,range01))
hist(range_std_data$dsDNA)
hist(log(range_std_data$dsDNA))
intermediate_protein_data = read.csv("/Users/seals/Downloads/rasp-mibi-main/intermediate_data/proteinexpression_df.csv")
head(intermediate_protein_data)
hist(intermediate_protein_data$CD45RO)
hist(range_std_data$CD45RO)
dim(intermediate_protein_data)
(intermediate_protein_data)
patient1_exp = read.csv("/Users/seals/Downloads/rasp-mibi-main/intermediate_data/
protein_expression/1.csv")
patient1_exp = read.csv("/Users/seals/Downloads/rasp-mibi-main/intermediate_data/protein_expression/1.csv")
patient1_exp
dim(patient1_exp)
dim(intermediate_protein_data)
names(intermediate_protein_data)
names(patient1_exp)
colnames(patient1_exp)[-c(1:3)]
names(intermediate_protein_data)[4:45]
marker_names  = read.csv("/Users/seals/Downloads/rasp-mibi-main/raw_data/proteins_by_frame.csv")
marker_names  = read.csv("/Users/seals/Downloads/rasp-mibi-main/rawdata/proteins_by_frame.csv")
marker_names
colnames(patient1_exp)
colnames(patient1_exp)[-1:3]
colnames(patient1_exp)[-c(1:3)]
colnames(patient1_exp)[-c(1:3)] = marker_names[,2]
head(patient1_exp[,1:3])
hist(patient1_exp$CD45RO
)
hist(cell_data[cell_data$SampleID=="1",]$CD45RO)
hist(log(cell_data[cell_data$SampleID=="1",]$CD45RO))
summary(cell_data[cell_data$SampleID=="1",]$CD45RO)
summary(patient1_exp$CD45RO)
summary(range_std_data[cell_data$SampleID=="1",]$CD45RO)
summary(range_std_data[range_std_data_data$SampleID=="1",]$CD45RO)
summary(range_std_data[range_std_data$SampleID=="1",]$CD45RO)
selected_data = as.data.frame(cell_data[,c(1,4:52)])
range_std_data =  selected_data
range_std_data[,-1] = as.data.frame(apply(selected_data[,-1],2,range01))
summary(range_std_data[range_std_data$SampleID=="1",]$CD45RO)
summary(cell_data[cell_data$SampleID=="1",]$CD45RO)
summary(range01(cell_data[cell_data$SampleID=="1",]$CD45RO))
summary(range01(cell_data[cell_data$SampleID=="2",]$CD45RO))
summary((cell_data[cell_data$SampleID=="2",]$CD45RO))
patient1_exp = read.csv("/Users/seals/Downloads/rasp-mibi-main/intermediate_data/protein_expression/2.csv")
colnames(patient1_exp)[-c(1:3)] = marker_names[,2]
summary(range_std_data[cell_data$SampleID=="2",]$CD45RO)
summary(patient1_exp$CD45RO)
summary(cell_data[cell_data$SampleID=="2",]$CD45RO)
View(Poisson_rg)
hist(cell_data[cell_data$SampleID=="2",]$CD45RO)
hist(patient1_exp$CD45RO)
min(cell_data$CD45RO)
min(cell_data[cell_data$SampleID=="2",]$CD45RO)
range(cell_data[cell_data$SampleID=="2",]$CD45RO)
2.46*2
unique(cell_data$SampleID)
marker_names[,2]
range(cell_data[cell_data$SampleID=="2",]$dsDNA)
range(patient1_exp$dsDNA)
exp(-3.2982)
exp(2.317)
hist(cell_data[cell_data$SampleID=="2",]$dsDNA)
hist(patient1_exp$dsDNA)
mean(cell_data$dsDNA)
range(cell_data$dsDNA)
exp(5.6)
5.6^2
range(patient1_exp$dsDNA)
hist(cell_data[cell_data$SampleID=="4",]$dsDNA)
range(cell_data[cell_data$SampleID=="4",]$dsDNA)
patient_dat = NULL
for(i in 1:41){
read_dat = read.csv("/Users/seals/Downloads/rasp-mibi-main/intermediate_data/protein_expression/4.csv")
patient_dat = cbind(patient_dat, read_dat)
}
patient_dat = NULL
for(i in 1:41){
read_dat = read.csv("/Users/seals/Downloads/rasp-mibi-main/intermediate_data/protein_expression/4.csv")
patient_dat = rbind(patient_dat, read_dat)
}
marker_names  = read.csv("/Users/seals/Downloads/rasp-mibi-main/rawdata/proteins_by_frame.csv")
colnames(patient_dat)[-c(1:3)] = marker_names[,2]
hist(patient_dat$dsDNA)
hist(log(patient_dat$dsDNA))
hist(log(patient_dat$CD45RO))
hist(log(patient_dat$CD45RO),bin = 1)
hist(log(patient_dat$CD45RO),breaks  = 1)
hist(log(patient_dat$CD45RO),breaks  = 100)
dim(patient_dat)
patient_dat = NULL
for(i in setdiff(1:41,c(22,30,38))){
read_dat = read.csv("/Users/seals/Downloads/rasp-mibi-main/intermediate_data/protein_expression/4.csv")
patient_dat = rbind(patient_dat, read_dat)
}
dim(patient_dat)
hist(log(patient_dat$CD45RO),breaks  = 100)
marker_names  = read.csv("/Users/seals/Downloads/rasp-mibi-main/rawdata/proteins_by_frame.csv")
colnames(patient_dat)[-c(1:3)] = marker_names[,2]
hist(log(patient_dat$CD45RO),breaks  = 100)
hist(log(patient_dat$CD45RO),breaks  = 100)
hist(log(patient_dat$CD45RO),breaks  = 1000)
hist(log(patient_dat$CD45RO),breaks  = 50)
hist(log(patient_dat$CD45RO),breaks  = 200)
hist(log(patient_dat$Lag3),breaks  = 200)
hist(log(patient_dat$Lag3),breaks  = 20)
hist(log(patient_dat$`PD-L1`),breaks  = 20)
hist(log(patient_dat$`PD-L1`),breaks  = 200)
hist(log(patient_dat$`PD1`),breaks  = 200)
hist((patient_dat$`PD1`),breaks  = 200)
hist((patient_dat$`PD1`),breaks  = 20)
hist((patient_dat$`PD1`),breaks  = 5)
hist((patient_dat$`IDO`),breaks  = 5)
hist(log(patient_dat$`IDO`),breaks  = 5)
hist(log(patient_dat$`IDO`),breaks  = 50)
hist(log(patient_dat$`IDO`),breaks  = 500)
hist(log(patient_dat$`IDO`),breaks  = 100)
hist(log(patient_dat$`Lag3`),breaks  = 100)
